FROM 9628a7a8abf36b2dff99c513aef84d3ad9701897
TO 27ba11b03a2e6fe5303d6370f718d8f5738db2d8

— users.models

ExtendedPermission
1 -> 1

User
1 -> 1
theme —> ‘light’

- shops.models

Shop
1 -> 1

Products (name, is_manual, manual_price, shop, is_active, is_removed, unit, correcting_factor)

ProductBase_old (Name, description , is_manual, manual_price, brand, type, quantity, shop, product_unit, is_active)

For each ProductBase:
	Create Product
		name —> name
		is_manual = True
		if product_unit:
			If product_unit.unit = ‘CL’:
				manual_price = (get_moded_usual_price() * 100) / product_unit.usual_quantity
			Else product_unit.unit = ‘G’:
				manual_price = (get_moded_usual_price() * 1000) / product_unit.usual_quantity
		else:
			manual_price = get_moded_usual_price()
		shop —> shop
		is_active = True
		is_removed = False
		if product_unit:
			unit = product_unit.unit
		correcting_factor = Decimal(1)

Caution:
Remove products with unit ‘CENT’
Must review all product prices before prod
Must do an inventory before prod

- stocks.models

No populate for all models.

- settings_data.models

Setting
No populate.

- notifications.models

No populate for all models.

- modules.models

TODO

- finances.models

Sale_old (Amount, date, done, is_credit, category, wording, justification, sender, recipient, operator, payment)

ExceptionnalMovement (Datetime, justification, operator, recipient, amount, is_credit)

For each Sale where category = ‘exceptionnal_movement’:
	Create new ExceptionnalMovement
		datetime —> date
		justification —> justification
		operator —> operator
		recipient —> sender (!!!)
		amount —> amount
		is_credit —> is_credit

Transfert (Datetime, justification, sender, recipient, amount)

For each Sale where category = ‘transfer’:
	Create new Transfert
		datetime —> date
		justification —> justification
		sender —> sender
		recipient —> recipient
		amount —> amount

LydiaOnline (date_operation, id_from_lydia, banked, date_banked)
For each Sale where category = ‘recharging’ && wording = ‘Rechargement automatique’:
	if payment.unique_payment_type == ‘lydia_auto’:
		Create new LydiaOnline
			date_operation —> date
			id_from_lydia —> payment.lydias[0].id_from_lydia

Recharging (datetime, sender, operator, payment_solution)
LydiaFaceToFace (sender, recipient, amount, date_operation, id_from_lydia, banked, date_banked)
Cash (sender, recipient, amount)
Cheque (sender, recipient, amount, is_cashed, cheque_number, signature_date, bank_account)
BankAccount (bank, account, owner)

For each Sale where category = ‘recharging’ && wording = ‘Rechargement manuel’:


	if payment.unique_payment_type == ‘cash’:
		Create new Recharging
			datetime —> date
			sender —> sender
			operator —> operator
			payment_solution = Create new Cash
								sender —> sender
								recipient —> AE ENSAM
								amount —> amount

	if payment.unique_payment_type == ‘lydia_face2face’:
		Create new Recharging
			datetime —> date
			sender —> sender
			operator —> operator
			payment_solution = Create new LydiaFaceToFace
								sender —> sender
								recipient —> AE ENSAM
								amount —> amount
								date_operation —> date
								id_from_lydia —> payment.lydias[0].id_from_lydia

	if payment.unique_payment_type == ‘cheque’:
		Create new Recharging
			datetime —> date
			sender —> sender
			operator —> operator
			payment_solution = Create new Cheque
								sender —> sender
								recipient —> AE ENSAM
								amount —> amount
								is_cashed —> False
								cheque_number —> payment.cheques[0].cheque_number
								signature_date —> payment.cheques[0].signature_date
								bank_account —> Get or Create BankAccount
												bank = payment.cheques[0].bank_account.bank
												account = payment.cheques[0].bank_account.account
												owner = payment.cheques[0].bank_account.owner

Sale (datetime, sender, recipient, operator, content_type, module_id, module, shop, products)
SaleProduct (sale, product, quantity, price)
